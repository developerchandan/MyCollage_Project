$woocommerce: #ad74a2;
$experimental: true !default;

@mixin clearfix() {
    &:after {
        content:"";
        display:block;
        clear:both;
    }
}
@mixin border_radius($radius:4px) {
    border-radius:$radius;
}

@mixin border_radius_right($radius:4px) {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
}

@mixin border_radius_left($radius:4px) {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin border_radius_bottom($radius:4px) {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
}

@mixin border_radius_top($radius:4px) {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin opacity($opacity:0.75) {
    filter: alpha(opacity=( $opacity * 100 ) );
    opacity: $opacity;
}

@mixin box_shadow($shadow_x:3px, $shadow_y:3px, $shadow_rad:3px, $shadow_in:3px, $shadow_color:#888) {
    box-shadow:$shadow_x $shadow_y $shadow_rad $shadow_in $shadow_color;
}

@mixin inset_box_shadow($shadow_x:3px, $shadow_y:3px, $shadow_rad:3px, $shadow_in:3px, $shadow_color:#888) {
    box-shadow:inset $shadow_x $shadow_y $shadow_rad $shadow_in $shadow_color;
}

@mixin text_shadow($shadow_x:3px, $shadow_y:3px, $shadow_rad:3px, $shadow_color:#fff) {
    text-shadow:$shadow_x $shadow_y $shadow_rad $shadow_color;
}

@mixin vertical_gradient($from: #000, $to: #FFF) {
    background: $from;
}

@mixin transition($selector:all, $animation:ease-in-out, $duration:.2s) {
    transition:$selector $animation $duration;
}

@mixin scale($ratio:1.5){
  transform:scale($ratio);
}

@mixin borderbox() {
    box-sizing: border-box;         /* Opera/IE 8+ */
    -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;

}

.clear { clear: both; }

.nobr { white-space: nowrap; }

@mixin darkorlighttextshadow( $a, $opacity: 0.8 ) {
    @if lightness( $a ) >= 65% {
        @include text_shadow( 0, -1px, 0, rgba(0, 0, 0, $opacity) );
    } @else {
        @include text_shadow( 0, 1px, 0, rgba(255, 255, 255, $opacity) );
    }
}


// We use this to add transitions to elements
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  @if $experimental {
    -webkit-transition: $property $speed $ease;
    -moz-transition: $property $speed $ease;
  }
  transition: $property $speed $ease;
}

/* Arrows http://codepen.io/kirkas/pen/otqyJ */

@mixin arrow_helper($arrowSize, $arrowColor, $margin, $side, $align) {
  @if $side == "top" {
    border-bottom-color: $arrowColor;
    top: -2 * $arrowSize;
  }
  @if $side == "bottom" {
    border-top-color: $arrowColor;
    bottom: -2 * $arrowSize;
  }
  @if $side == "left" {
    border-right-color: $arrowColor;
    left: -2 * $arrowSize;
  }
  @if $side == "right" {
    border-left-color: $arrowColor;
    right: -2 * $arrowSize;
  }
  @if $side == "right" or $side == "left" {
    @if $align == "center" {
      top: 50%;
      margin-top: -$arrowSize;
    }
    @else if $align == "top" {
      top: $margin;
    }
    @else if $align == "bottom" {
      bottom: $margin;
    }
  }
  @if $side == "bottom" or $side == "top" {
    @if $align == "center" {
      right: 50%;
      margin-right: -$arrowSize;
    }
    @else if $align == "left" {
      left: $margin;
    }
    @else if $align == "right" {
      right: $margin;
    }
  }
}

@mixin arrow($side: "right", $align: "center", $size: 20px, $color: #f6f6f6, $borderColor: "none", $borderSize: 3px) {
  $selector: "&:after, &:before";
  @if $borderColor == "none" {
    $selector: "&:after";
  }
  #{$selector} {
    border: solid transparent;
    content: "";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    visibility: visible;
  }

  &:after {
    border-width: $size;
    @include arrow_helper($size, $color, $size, $side, $align);
  }

  @if $borderColor != "none" {
    &:before {
      border-width: $borderSize + $size;
      @include arrow_helper($size + $borderSize, $borderColor, $size - $borderSize, $side, $align);
    }
  }
}